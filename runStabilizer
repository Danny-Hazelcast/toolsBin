#!/bin/sh

boxCount=${1:-2}
memberBox=${2:-0}
members=${3:-2}
clients=${4:-2}
duration=${5:-1m}
output=${6:-output}

memberHeapSZ=2000m
clientHeapSZ=1000m

partitions=271
monitorSec=30
statsInterval=30

gcArgs="-verbose:gc -Xloggc:verbosegc.log"
gcArgs="$gcArgs -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime"

memberJvmArgs="-Dhazelcast.partition.count=$partitions"
memberJvmArgs="$memberJvmArgs -Dhazelcast.health.monitoring.level=NOISY -Dhazelcast.health.monitoring.delay.seconds=$monitorSec"
memberJvmArgs="$memberJvmArgs -Xmx$memberHeapSZ -XX:+HeapDumpOnOutOfMemoryError"
memberJvmArgs="$memberJvmArgs $gcArgs"

clientJvmArgs="-Xmx$clientHeapSZ -XX:+HeapDumpOnOutOfMemoryError"
clientJvmArgs="$clientJvmArgs $gcArgs"

if ! provisioner --scale ${boxCount} ; then
  echo "provision FAIL"
  exit 1
fi
provisioner --clean
provisioner --restart

forIpsIn agents.txt takeStats $statsInterval

coordinator --memberWorkerCount ${members} \
	        --clientWorkerCount ${clients} \
	        --duration ${duration} \
	        --workerVmOptions "$memberJvmArgs" \
                --clientWorkerVmOptions "$clientJvmArgs" \
	        --parallel \
	        test.properties

forIpsIn agents.txt stopStats
forIpsIn agents.txt getOutFiles

provisioner --download ${output}

if [ -f nohup.out ]; then
  runId=$(grep -oh -m 1 "Starting testsuite: [0-9].*" nohup.out | cut -d ' ' -f3)
  mv nohup.out nohup-${runId}.out
fi
